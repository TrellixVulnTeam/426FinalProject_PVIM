{"version":3,"sources":["Box.js","SearchPage.js","Banner.js","App.js","serviceWorker.js","index.js"],"names":["Box","props","state","enrolled","joined","join","bind","this","groupinfo","console","log","length","setState","axios","post","c","gmid","share_token","tok","then","res","data","response","className","id","name","members","onClick","Component","SearchPage","value","searchedclasses","groups","handleChange","handleSubmit","event","target","classes","filter","toUpperCase","includes","e","preventDefault","type","placeholder","onChange","map","joinedclasses","j","toString","Banner","src","App","loggedin","compclasses","window","location","search","get","params","per_page","href","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"wseA8DeA,E,kDAhDX,WAAYC,GAAO,IAAD,8BACd,cAAMA,IACDC,MAAM,CACPC,SAAS,EACTC,OAAO,GAEX,EAAKC,KAAO,EAAKA,KAAKC,KAAV,gBANE,E,gEAWVC,KAAKN,MAAMO,YACXC,QAAQC,IAAIH,KAAKN,MAAMO,WACnBD,KAAKN,MAAMO,UAAUG,OAAO,GAC5BJ,KAAKK,SAAS,CAACR,OAAO,O,6BAS/BS,IAAMC,KAAN,4CAAgDP,KAAKN,MAAMc,EAAEC,KAA7D,iBAA0ET,KAAKN,MAAMc,EAAEE,aAAvF,OAAqGV,KAAKN,MAAMiB,KAAO,IAEvHC,MAAK,SAAAC,GAAG,OAAIX,QAAQC,IAAIU,EAAIC,KAAKC,aAClCf,KAAKK,SAAS,CAACR,OAAO,M,+BAIpB,OAEI,yBAAKmB,UAAU,uBACX,6BAASA,UAAU,qBACf,uBAAGA,UAAU,SAAShB,KAAKN,MAAMc,EAAES,IACnC,uBAAGD,UAAU,YAAYhB,KAAKN,MAAMc,EAAEU,KAAtC,KAGoB,GAAnBlB,KAAKL,MAAME,QAAaG,KAAKN,MAAMO,WAAYD,KAAKN,MAAMO,UAAUG,OAAO,GAAK,uBAAGY,UAAU,YAAYhB,KAAKN,MAAMO,UAAU,GAAGkB,QAAQf,OAAzD,eAE7D,GAAnBJ,KAAKL,MAAME,QAAa,4BAAQmB,UAAU,iBAAiBC,GAAG,OAAOG,QAASpB,KAAKF,MAA3D,iBACL,GAAnBE,KAAKL,MAAME,QAAa,4BAAQmB,UAAU,UAAUC,GAAG,UAA/B,gB,GA1C3BI,aCqHHC,E,kDA3HX,WAAY5B,GAAO,IAAD,8BACd,cAAMA,IACDC,MAAM,CACP4B,MAAM,GACNC,gBAAgB,GAChBC,OAAO,IAEX,EAAKC,aAAe,EAAKA,aAAa3B,KAAlB,gBACpB,EAAK4B,aAAe,EAAKA,aAAa5B,KAAlB,gBARN,E,yDAYL6B,GAAQ,IAAD,OAChB5B,KAAKK,SAAS,CAACkB,MAAOK,EAAMC,OAAON,QACnCvB,KAAKK,SAAS,CAACmB,gBAAiBxB,KAAKN,MAAMoC,QAAQC,QAAO,SAAAvB,GAAC,OAAEA,EAAES,GAAGe,cAAcC,SAAS,EAAKtC,MAAM4B,MAAMS,sB,mCA2BjGE,GAAG,IAAD,OACXA,EAAEC,iBAIFnC,KAAKK,SAAS,CAACmB,gBAAiBxB,KAAKN,MAAMoC,QAAQC,QAAO,SAAAvB,GAAC,OAAEA,EAAES,GAAGe,cAAcC,SAAS,EAAKtC,MAAM4B,MAAMS,sB,+BAKrG,IAAD,OAcJ,OACI,yBAAKhB,UAAU,YAEf,yBAAKA,UAAU,oBACX,yBAAKA,UAAU,WACX,2BAAOA,UAAU,QAAQoB,KAAK,OAAOnB,GAAG,SAASoB,YAAY,qBAAqBd,MAAOvB,KAAKL,MAAM4B,MAAOe,SAAUtC,KAAK0B,gBAE9H,yBAAKV,UAAU,WACX,uBAAGA,UAAU,iBAAiBC,GAAG,SAASG,QAASpB,KAAK2B,cAAxD,YAMR,yBAAKX,UAAY,iCACZhB,KAAKL,MAAM6B,gBAAgBe,KAAI,SAAA/B,GAAC,OAE7B,kBAAC,EAAD,CAAKA,EAAKA,EAAGG,IAAK,EAAKjB,MAAMiB,IAAKV,UAAW,EAAKP,MAAM8C,cAAcT,QAAO,SAAAU,GAAI,OAAOA,EAAExB,IAAMT,EAAEC,KAAKiC,oBAkB/G,yBAAK1B,UAAU,eACP,6BACA,uBAAGA,UAAW,UAAUoB,KAAO,OAAOnB,GAAG,WAAzC,mIAAmL,6BAAnL,mOACgO,6BADhO,6FAGA,8BAEJ,6BACI,8BAGR,yBAAKD,UAAU,gBACP,6BACA,uBAAGA,UAAW,UAAUoB,KAAO,OAAOnB,GAAG,WAAzC,sFAAsI,6BAAtI,oGACA,mC,GAnHKI,aCQVsB,E,uKARP,OACI,yBAAK3B,UAAU,UACX,6DACA,yBAAK4B,IAAI,gFAAgF5B,UAAU,c,GAN9FK,a,QCiENwB,E,kDA1Db,WAAYnD,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAM,CACTmC,QAAQ,GACRgB,UAAS,EACTnC,IAAK,GACL6B,cAAc,IANA,E,iEAahBxC,KAAKK,SAAS,CAACyB,QAAQiB,IACnBC,OAAOC,SAASC,QAClBlD,KAAKK,SAAS,CAACyC,UAAS,EAAMnC,IAAKqC,OAAOC,SAASC,W,0CAMnC,IAAD,OACdlD,KAAKL,MAAMgB,IAAIP,OAAQ,IACxBF,QAAQC,IAAI,MACZG,IAAM6C,IAAN,2CAA8CnD,KAAKL,MAAMgB,KAAM,CAAC,8BAA8B,IAAKyC,OAAO,CAACC,SAAS,OACnHzC,MAAK,SAAAC,GAAG,OAAE,EAAKR,SAAS,CAAEmC,cAAc3B,EAAIC,KAAKC,iB,+BAOpD,OACA,yBAAKC,UAAU,gBACb,yBAAKA,UAAU,mBACb,kBAAC,EAAD,QAGFhB,KAAKL,MAAMmD,UACX,yBAAK9B,UAAU,SACb,uBAAGsC,KAAO,wGACR,4BAAQtC,UAAU,kBAAlB,0BAMLhB,KAAKL,MAAMmD,UACV,yBAAK9B,UAAU,iBACb,kBAAC,EAAD,CAAYc,QAAS9B,KAAKL,MAAMmC,QAASnB,IAAOX,KAAKL,MAAMgB,IAAK6B,cAAexC,KAAKL,MAAM6C,sB,GAnDhFnB,aCIEkC,QACW,cAA7BP,OAAOC,SAASO,UAEe,UAA7BR,OAAOC,SAASO,UAEhBR,OAAOC,SAASO,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrD,MAAK,SAAAsD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnE,QAAQmE,MAAMA,EAAMC,a","file":"static/js/main.30ba67ed.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport axios from 'axios'\n\n// this.props.c =\n// {\n//     \"cid\":\"ASTR101\",\n//     \"name\":\"Introduction to Astronomy\",\n//     \"hours\":1,\n//     \"GMID\": 0,\n//     \"share_token\":\"sgdhhsjh\"\n// }\n\nclass Box extends Component{\n    constructor(props){\n        super(props) \n        this.state={\n            enrolled:0,\n            joined:0\n        }\n        this.join = this.join.bind(this);\n    }\n\n    componentDidMount(){\n    \n        if (this.props.groupinfo){\n            console.log(this.props.groupinfo)\n            if (this.props.groupinfo.length>0){\n                this.setState({joined:1})\n               \n            }\n            \n        }\n    }\n\n\n    join(){  \n       axios.post(`https://api.groupme.com/v3/groups/${this.props.c.gmid}/join/${this.props.c.share_token}${this.props.tok}`, {  \n       })\n      .then(res => console.log(res.data.response));\n      this.setState({joined:1})\n    }\n    \n    render(){\n        return(\n\n            <div className=\"tile is-parent is-4\">\n                <article className=\"tile is-child box\">\n                    <p className=\"title\">{this.props.c.id}</p>\n                    <p className=\"subtitle\">{this.props.c.name} </p>\n                    \n\n                    {this.state.joined==1 && this.props.groupinfo &&this.props.groupinfo.length>0 && <p className=\"subtitle\">{this.props.groupinfo[0].members.length} in GroupMe</p>}\n\n                    {this.state.joined==0 && <button className=\"button is-info\" id=\"join\" onClick={this.join}>click to join</button>}\n                    {this.state.joined==1 && <button className=\"button \" id=\"joined\" >joined</button>}\n                </article>\n            </div>\n            \n        )\n    }\n}\nexport default Box;","import Axios from 'axios';\nimport React, { Component } from 'react';\nimport './App.css';\nimport Box from './Box';\nimport axios from 'axios';\n\nclass SearchPage extends Component{\n    constructor(props){\n        super(props)\n        this.state={\n            value:\"\",\n            searchedclasses:[],\n            groups:{}\n        }\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n\n    }\n    \n    handleChange(event) {\n        this.setState({value: event.target.value});\n        this.setState({searchedclasses: this.props.classes.filter(c=>c.id.toUpperCase().includes(this.state.value.toUpperCase()))})\n        //this.state.value is what is currently typed in box\n        //this.props.classes ~will~ be json array of classes \n        \n        //TODO: suggestions while typing\n\n        //if we want classes to pop up while typing like coursicle:\n        //TODO: set this.state.searchedClasses to classes that meet current search\n    }\n    // componentDidMount(){\n    //     var groups={}\n    //     if (this.props.joinedclasses.length >0){\n    //         // console.log(typeof this.props.joinedclasses[10].id)\n    //         // let filtered = this.props.classes.filter(c=>c.gmid.toString()===this.props.joinedclasses[10].id)\n    //         // console.log(\"MATCH: \"+filtered[0].id)\n    //         for (let i = 0; i<this.props.classes.length; i++){\n    //             let filtered = this.props.joinedclasses.filter(j=>{\n    //                 return j.id==(this.props.classes[i].gmid.toString())\n    //             })\n    //             groups[this.props.classes[i].gmid.toString()] = filtered \n    //         }\n\n    //     }\n    // }\n    \n\n\n    handleSubmit(e){\n        e.preventDefault();\n        //console.log(this.state.value.toUpperCase());\n        //should set state of searched classes to ones that match this.state.value\n        //this.props.filter (matching this.state.value = searchedclasses)\n        this.setState({searchedclasses: this.props.classes.filter(c=>c.id.toUpperCase().includes(this.state.value.toUpperCase()))})\n    }\n   \n    \n\n    render(){\n        \n        //console.log(typeof this.props.classes[10].gmid)\n        \n        // let target = this.props.classes[10].gmid\n        // if (this.props.joinedclasses.length >0){\n        //     let groupinfo = this.props.classes.map(c=> {\n        //         this.props.joinedclasses.filter(j=> c.gmid==j.id.toString())[0]\n        //     })\n        //     console.log(groupinfo)\n        // }\n        \n        \n        \n        return(\n            <div className=\"homepage\">\n            \n            <div className=\"field has-addons\">\n                <div className=\"control\">\n                    <input className=\"input\" type=\"text\" id=\"filler\" placeholder=\"Search for a class\" value={this.state.value} onChange={this.handleChange}></input>\n                </div>\n                <div className=\"control\">\n                    <a className=\"button is-info\" id=\"search\" onClick={this.handleSubmit}>Search</a>\n                </div>\n            </div> \n           \n\n            \n            <div className = \"boxcontainer tile is-ancestor\">\n                {this.state.searchedclasses.map(c =>\n                    //let a = this.props.joinedclasses.filter(j=> j.id === (c.gmid))\n                    <Box c = {c} tok={this.props.tok} groupinfo={this.props.joinedclasses.filter(j=>{return j.id == c.gmid.toString()})}></Box>\n                    // if (a.length >0){\n                    //     return  <Box c = {c} tok={this.props.tok} groupinfo={a[0]}></Box>\n                    // }\n                    // else{\n                    //     return <Box c = {c} tok={this.props.tok}></Box>\n                    // }\n                    \n                    //console.log(a)\n                    // a.length!=0 && <Box c = {c} tok={this.props.tok} groupinfo={a[0]}></Box>\n                    // a.length==0 && <Box c = {c} tok={this.props.tok}></Box>\n\n                    \n                    //<Box c = {c} tok={this.props.tok}></Box>\n                \n                    \n                )}\n            </div>\n            <div className=\"our_mission\">\n                    <br></br>\n                    <p className= \"textbox\" type = \"text\" id=\"mission\">We recognize that the connections, resources, and peer-support that many students benefit from are not accessible to everyone.  <br></br> \n                    We celebrate the different circumstances and backgrounds that have led each of you to where you are today: to a community that shares a passion for computer science and cultivates an environment of encouragement and growth. <br></br>\n                    Now, the connections and support that you need to succeed are more accessible than ever. </p>\n                    <br></br>\n                </div> \n                <div>\n                    <br></br>\n                </div>\n\n            <div className=\"instructions\">\n                    <br></br>\n                    <p className= \"textbox\" type = \"text\" id=\"instruc\">In the search box above, search for a COMP course (i.e. COMP 110, COMP 401, etc.). <br></br> Click the \"click to join\" button to be added to a GroupMe for that course with your classmates!</p>\n                    <br></br>\n                </div>\n\n\n            </div>\n            \n        )\n    }\n}\nexport default SearchPage;","import React, { Component } from 'react';\nimport './App.css';\n\nclass Banner extends Component{\n \n    render(){\n        return(\n            <div className=\"banner\">\n                <p>Carolina COMP Course ConnectMe</p>\n                <img src=\"https://coursedesignmatters.files.wordpress.com/2016/12/groupme2012.png?w=640\" className=\"logo\"></img>\n            </div>\n        )\n    }\n}  \nexport default Banner;","import React, { Component } from 'react';\nimport './App.css';\nimport 'bulma/css/bulma.css';\nimport SearchPage from \"./SearchPage\";\nimport Banner from \"./Banner\";\nimport axios from 'axios';\nimport compclasses from './compclasses.json';\n\nclass App extends Component {\n\n  constructor(props){\n    super(props)\n    this.state={\n      classes:[],\n      loggedin:false,\n      tok: \"\",\n      joinedclasses:[]\n    }\n  }\n\n  componentWillMount(){\n    //get class list here\n    //this.setState({classes: classList})\n    this.setState({classes:compclasses})\n    if (window.location.search){\n      this.setState({loggedin:true, tok: window.location.search});\n      // axios.get('http://localhost:8080/')\n      //   .then(response => this.setState({classes: response.data}) )\n    }\n  }\n\n  componentDidMount(){\n    if(this.state.tok.length >1){\n      console.log('hi')\n      axios.get(`https://api.groupme.com/v3/groups${this.state.tok}`,{'Access-Control-Allow-Origin':'*', params:{per_page:100} })\n      .then(res=>this.setState({ joinedclasses:res.data.response  }))\n    }\n  }\n  \n\n\n  render(){\n    return (\n    <div className=\"appcontainer\">\n      <div className=\"BannerContainer\">\n        <Banner/>\n      </div> \n    \n    {!this.state.loggedin &&\n      <div className=\"login\">\n        <a href = \"https://oauth.groupme.com/oauth/authorize?client_id=Rfj6DQHczFqwTDipv0MF6eq9fpK8H3gj9bf4IKuplRB74Esj\"> \n          <button className=\"button is-info\" >Sign in with GroupMe</button>\n        </a> \n      </div>\n    }\n      \n      \n    {this.state.loggedin &&\n      <div className=\"App container\">\n        <SearchPage classes={this.state.classes} tok = {this.state.tok} joinedclasses={this.state.joinedclasses}/>\n      </div>\n    }\n    </div>\n      \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bulma/css/bulma.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}